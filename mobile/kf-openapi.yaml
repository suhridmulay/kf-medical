openapi: 3.0.3
info:
  title: Application
  version: 0.0.1
  description: >
    To use the API you must first sign-in using the `POST /auth/sign-in`
    endpoint and collect the **Bearer token** from the response.
servers:
  - url: /api
paths:
  /auth/sign-up:
    post:
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
                invitationToken:
                  type: string
                  description: >-
                    This invitation token is sent via email to the user. If they
                    access it via the link, the invitation token is used to
                    auto-accept the invitation to the specific tenant.
                tenantId:
                  type: string
                  description: >-
                    If the user access the application via subdomain, it
                    onboards the user on the tenant passed.
      responses:
        '200':
          description: Bearer token.
        '400':
          description: Email is already in use.
        '429':
          description: Too Many Requests.
  /auth/sign-in:
    post:
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
                invitationToken:
                  type: string
                  description: >-
                    This invitation token is sent via email to the user. If they
                    access it via the link, the invitation token is used to
                    auto-accept the invitation to the specific tenant.
                tenantId:
                  type: string
                  description: >-
                    If the user access the application via subdomain, it
                    onboards the user on the tenant passed.
      responses:
        '200':
          description: Bearer token.
        '400':
          description: Sorry, we don't recognize your credentials.
        '429':
          description: Too Many Requests.
  /auth/me:
    get:
      security:
        - bearerAuth: []
      tags:
        - Authentication
      responses:
        '200':
          description: Current User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCurrent'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /auth/change-password:
    put:
      security:
        - bearerAuth: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Current User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCurrent'
        '400':
          description: The old password is invalid.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /auth/send-email-address-verification-email:
    post:
      security:
        - bearerAuth: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId:
                  type: string
                  description: >-
                    If the user access the application via subdomain, the email
                    will also be sent using the subdomain.
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /auth/send-password-reset-email:
    post:
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                tenantId:
                  type: string
                  description: >-
                    If the user access the application via subdomain, the email
                    will also be sent using the subdomain.
      responses:
        '200':
          description: OK
        '429':
          description: Too Many Requests.
  /auth/password-reset:
    put:
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                  description: >-
                    The token is the token the user receives via email when
                    he/she asks to reset the password.
                password:
                  type: string
                  format: password
                  description: The new password.
      responses:
        '200':
          description: OK
        '400':
          description: Password reset link is invalid or has expired.
        '429':
          description: Too Many Requests.
  /auth/verify-email:
    put:
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: >-
                    The token is the token the user receives via email to verify
                    his/her email.
      responses:
        '200':
          description: OK
        '400':
          description: Email verification link is invalid or has expired.
        '429':
          description: Too Many Requests.
  /auth/profile:
    put:
      security:
        - bearerAuth: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  properties:
                    firstName:
                      type: string
                    lastName:
                      type: string
                    phoneNumber:
                      type: string
                    avatars:
                      type: array
                      items:
                        $ref: '#/components/schemas/FileInput'
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Patient
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Patient
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/PatientInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient:
    get:
      security:
        - bearerAuth: []
      tags:
        - Patient
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[firstName]
          schema:
            type: string
        - in: query
          name: filter[lastName]
          schema:
            type: string
        - in: query
          name: filter[fullName]
          schema:
            type: string
        - in: query
          name: filter[gender]
          schema:
            type: string
            enum:
              - Male
              - Female
        - in: query
          name: filter[localityName]
          schema:
            type: string
        - in: query
          name: filter[mobileNumber]
          schema:
            type: string
        - in: query
          name: filter[aadharNumber]
          schema:
            type: string
        - in: query
          name: filter[dateOfBirthRange][]
          schema:
            type: array
            items:
              type: string
              format: date
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/Patient'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Patient
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/PatientInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Patient
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - Patient
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - Patient
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/PatientInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/health-center/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Health Center
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCenter'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Health Center
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/HealthCenterInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCenter'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/health-center:
    get:
      security:
        - bearerAuth: []
      tags:
        - Health Center
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[name]
          schema:
            type: string
        - in: query
          name: filter[address]
          schema:
            type: string
        - in: query
          name: filter[phoneNumber]
          schema:
            type: string
        - in: query
          name: filter[adminName]
          schema:
            type: string
            format: uuid
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/HealthCenter'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Health Center
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/HealthCenterInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCenter'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Health Center
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/health-center/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - Health Center
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/health-center/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - Health Center
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/HealthCenterInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCenter'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient-visit/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - PatientVisit
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientVisit'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - PatientVisit
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/PatientVisitInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientVisit'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient-visit:
    get:
      security:
        - bearerAuth: []
      tags:
        - PatientVisit
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[patient]
          schema:
            type: string
            format: uuid
        - in: query
          name: filter[medicalCenter]
          schema:
            type: string
            format: uuid
        - in: query
          name: filter[doctor]
          schema:
            type: string
            format: uuid
        - in: query
          name: filter[visitDateRange][]
          schema:
            type: array
            items:
              type: string
              format: date
        - in: query
          name: filter[repeatVisit]
          schema:
            type: boolean
        - in: query
          name: filter[caseSeverity]
          schema:
            type: string
            enum:
              - Green
              - Orange
              - Red
        - in: query
          name: filter[isTelemedReferral]
          schema:
            type: boolean
        - in: query
          name: filter[medicineCopayRange][]
          schema:
            type: array
            items:
              type: number
        - in: query
          name: filter[doctorCopayRange][]
          schema:
            type: array
            items:
              type: number
        - in: query
          name: filter[telemedCopayRange][]
          schema:
            type: array
            items:
              type: number
        - in: query
          name: filter[telemedicineDoctor]
          schema:
            type: string
            format: uuid
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/PatientVisit'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - PatientVisit
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/PatientVisitInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientVisit'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - PatientVisit
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient-visit/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - PatientVisit
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient-visit/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - PatientVisit
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/PatientVisitInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientVisit'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-enum/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Medicine
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/MedicineEnumInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-enum:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[medicineName]
          schema:
            type: string
        - in: query
          name: filter[keptInStock]
          schema:
            type: boolean
        - in: query
          name: filter[isCommon]
          schema:
            type: boolean
        - in: query
          name: filter[medicineCategory]
          schema:
            type: string
            format: uuid
        - in: query
          name: filter[genericName]
          schema:
            type: string
        - in: query
          name: filter[compositionName]
          schema:
            type: string
        - in: query
          name: filter[msrpRange][]
          schema:
            type: array
            items:
              type: number
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/MedicineEnum'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Medicine
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/MedicineEnumInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Medicine
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-enum/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-enum/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - Medicine
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/MedicineEnumInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/diagnostic-enum/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Diagnostic Lab
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagnosticEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Diagnostic Lab
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/DiagnosticEnumInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagnosticEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/diagnostic-enum:
    get:
      security:
        - bearerAuth: []
      tags:
        - Diagnostic Lab
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[diagnosticName]
          schema:
            type: string
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/DiagnosticEnum'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Diagnostic Lab
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/DiagnosticEnumInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagnosticEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Diagnostic Lab
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/diagnostic-enum/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - Diagnostic Lab
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/diagnostic-enum/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - Diagnostic Lab
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/DiagnosticEnumInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagnosticEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/doctor/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Doctor
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Doctor
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/DoctorInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/doctor:
    get:
      security:
        - bearerAuth: []
      tags:
        - Doctor
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[name]
          schema:
            type: string
        - in: query
          name: filter[specialization]
          schema:
            type: string
        - in: query
          name: filter[user]
          schema:
            type: string
            format: uuid
        - in: query
          name: filter[phone]
          schema:
            type: string
        - in: query
          name: filter[certifications]
          schema:
            type: string
        - in: query
          name: filter[registrationId]
          schema:
            type: string
        - in: query
          name: filter[isRuralHealthcareProfessional]
          schema:
            type: boolean
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/Doctor'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Doctor
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/DoctorInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Doctor
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/doctor/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - Doctor
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/doctor/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - Doctor
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/DoctorInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient-document/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Patient Document
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientDocument'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Patient Document
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/PatientDocumentInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientDocument'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient-document:
    get:
      security:
        - bearerAuth: []
      tags:
        - Patient Document
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[patient]
          schema:
            type: string
            format: uuid
        - in: query
          name: filter[reportName]
          schema:
            type: string
        - in: query
          name: filter[reportDateRange][]
          schema:
            type: array
            items:
              type: string
              format: date
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/PatientDocument'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Patient Document
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/PatientDocumentInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientDocument'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Patient Document
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient-document/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - Patient Document
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/patient-document/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - Patient Document
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/PatientDocumentInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientDocument'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-supplies/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine Supplies
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineSupplies'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Medicine Supplies
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/MedicineSuppliesInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineSupplies'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-supplies:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine Supplies
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[medicine]
          schema:
            type: string
            format: uuid
        - in: query
          name: filter[inventoryAddDateRange][]
          schema:
            type: array
            items:
              type: string
              format: date
        - in: query
          name: filter[countRange][]
          schema:
            type: array
            items:
              type: integer
        - in: query
          name: filter[batchNumber]
          schema:
            type: string
        - in: query
          name: filter[expiryDateRange][]
          schema:
            type: array
            items:
              type: string
              format: date
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/MedicineSupplies'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Medicine Supplies
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/MedicineSuppliesInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineSupplies'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Medicine Supplies
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-supplies/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine Supplies
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-supplies/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - Medicine Supplies
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/MedicineSuppliesInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineSupplies'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-inventory/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine Inventory
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineInventory'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Medicine Inventory
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/MedicineInventoryInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineInventory'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-inventory:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine Inventory
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[medicine]
          schema:
            type: string
            format: uuid
        - in: query
          name: filter[inventoryDateRange][]
          schema:
            type: array
            items:
              type: string
              format: date
        - in: query
          name: filter[countRange][]
          schema:
            type: array
            items:
              type: integer
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/MedicineInventory'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Medicine Inventory
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/MedicineInventoryInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineInventory'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Medicine Inventory
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-inventory/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine Inventory
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-inventory/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - Medicine Inventory
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/MedicineInventoryInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineInventory'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/symptoms-enum/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - SymptomsEnum
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SymptomsEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - SymptomsEnum
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/SymptomsEnumInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SymptomsEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/symptoms-enum:
    get:
      security:
        - bearerAuth: []
      tags:
        - SymptomsEnum
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[symptomName]
          schema:
            type: string
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/SymptomsEnum'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - SymptomsEnum
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/SymptomsEnumInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SymptomsEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - SymptomsEnum
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/symptoms-enum/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - SymptomsEnum
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/symptoms-enum/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - SymptomsEnum
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/SymptomsEnumInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SymptomsEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medical-history/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medical History
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalHistory'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Medical History
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/MedicalHistoryInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalHistory'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medical-history:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medical History
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[patient]
          schema:
            type: string
            format: uuid
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/MedicalHistory'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Medical History
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/MedicalHistoryInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalHistory'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Medical History
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medical-history/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medical History
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medical-history/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - Medical History
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/MedicalHistoryInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalHistory'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/chronic-disease-enum/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Chronic Disease
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChronicDiseaseEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Chronic Disease
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/ChronicDiseaseEnumInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChronicDiseaseEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/chronic-disease-enum:
    get:
      security:
        - bearerAuth: []
      tags:
        - Chronic Disease
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[diseaseName]
          schema:
            type: string
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChronicDiseaseEnum'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Chronic Disease
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/ChronicDiseaseEnumInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChronicDiseaseEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Chronic Disease
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/chronic-disease-enum/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - Chronic Disease
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/chronic-disease-enum/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - Chronic Disease
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/ChronicDiseaseEnumInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChronicDiseaseEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-category-enum/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine Category
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineCategoryEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Medicine Category
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/MedicineCategoryEnumInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineCategoryEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-category-enum:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine Category
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[categoryName]
          schema:
            type: string
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/MedicineCategoryEnum'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Medicine Category
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/MedicineCategoryEnumInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineCategoryEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Medicine Category
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-category-enum/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - Medicine Category
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/medicine-category-enum/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - Medicine Category
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  $ref: '#/components/schemas/MedicineCategoryEnumInput'
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineCategoryEnum'
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/audit-log:
    get:
      security:
        - bearerAuth: []
      tags:
        - Audit Logs
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[timestampRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: filter[action]
          schema:
            type: string
            enum:
              - create
              - update
              - delete
        - in: query
          name: filter[entityId]
          schema:
            type: string
        - in: query
          name: filter[createdByEmail]
          schema:
            type: string
        - in: query
          name: filter[entityNames][]
          schema:
            type: array
            items:
              type: string
              example: tenant
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: timestamp_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/file/credentials:
    get:
      security:
        - bearerAuth: []
      tags:
        - File
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filename
          schema:
            type: string
            example: file.txt
        - in: query
          name: storageId
          schema:
            type: string
            example: userAvatarsProfiles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  downloadUrl:
                    type: string
                  uploadUrl:
                    type: string
                  uploadCredentials:
                    type: object
                    description: >-
                      Credentials used on the FormData to post the to be
                      uploaded file.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /file/download:
    get:
      tags:
        - File
      parameters:
        - in: query
          name: privateUrl
          schema:
            type: string
      responses:
        '200':
          description: File
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /file/upload:
    post:
      tags:
        - File
      parameters:
        - in: query
          name: token
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /plan/stripe/webhook:
    post:
      description: >-
        The webhook is used by Stripe only to notify the application when some
        event occurs.
      tags:
        - Plan
      parameters:
        - in: header
          name: stripe-signature
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Stripe Payload
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  received:
                    type: boolean
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/plan/stripe/portal:
    post:
      description: Creates a URL for the user to use the Stripe Portal.
      security:
        - bearerAuth: []
      tags:
        - Plan
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: Stripe Portal URL
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/plan/stripe/checkout:
    post:
      description: Creates a session for the user to use the Stripe Checkout.
      security:
        - bearerAuth: []
      tags:
        - Plan
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Stripe Checkout Session ID
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/settings:
    get:
      tags:
        - Settings
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Settings
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                settings:
                  $ref: '#/components/schemas/SettingsInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{id}:
    get:
      tags:
        - Tenant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - Tenant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/TenantInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant:
    get:
      security:
        - bearerAuth: []
      tags:
        - Tenant
      parameters:
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tenant'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - Tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/TenantInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Tenant
      parameters:
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/url:
    get:
      security:
        - bearerAuth: []
      tags:
        - Tenant
      parameters:
        - in: query
          name: url
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/invitation/:token/accept:
    post:
      security:
        - bearerAuth: []
      tags:
        - Tenant
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                forceAcceptOtherEmail:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/invitation/:token/decline:
    delete:
      security:
        - bearerAuth: []
      tags:
        - Tenant
      parameters:
        - in: query
          name: token
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/user/{id}:
    get:
      tags:
        - User
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/user:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: filter[id]
          schema:
            type: string
        - in: query
          name: filter[fullName]
          schema:
            type: string
        - in: query
          name: filter[email]
          schema:
            type: string
        - in: query
          name: filter[role]
          schema:
            type: string
        - in: query
          name: filter[status]
          schema:
            type: string
        - in: query
          name: filter[createdAtRange][]
          schema:
            type: array
            items:
              type: string
              format: date-time
          explode: true
        - in: query
          name: offset
          schema:
            type: number
            example: 0
        - in: query
          name: limit
          schema:
            type: number
            example: 10
        - in: query
          name: orderBy
          schema:
            type: string
            example: createdAt_DESC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  count:
                    type: number
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    put:
      security:
        - bearerAuth: []
      tags:
        - User
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  properties:
                    id:
                      type: string
                    roles:
                      type: array
                      items:
                        type: string
                        example: admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    post:
      security:
        - bearerAuth: []
      tags:
        - User
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  properties:
                    emails:
                      type: array
                      items:
                        type: string
                    roles:
                      type: array
                      items:
                        type: string
                        example: admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
    delete:
      security:
        - bearerAuth: []
      tags:
        - User
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: ids[]
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/user/autocomplete:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    label:
                      type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
  /tenant/{tenantId}/user/import:
    post:
      security:
        - bearerAuth: []
      tags:
        - User
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - importHash
              properties:
                data:
                  type: object
                  properties:
                    email:
                      type: string
                    roles:
                      type: array
                      items:
                        type: string
                        example: admin
                importHash:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too Many Requests.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Patient:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        gender:
          type: string
          enum:
            - Male
            - Female
        age:
          type: integer
        localityName:
          type: string
        mobileNumber:
          type: string
        aadharNumber:
          type: string
        dateOfBirth:
          type: string
          format: date
        picture:
          type: array
          items:
            $ref: '#/components/schemas/File'
        medicalHistory:
          $ref: '#/components/schemas/MedicalHistory'
        medicalVisits:
          type: array
          items:
            $ref: '#/components/schemas/PatientVisit'
        medicalDocuments:
          type: array
          items:
            $ref: '#/components/schemas/PatientDocument'
    PatientInput:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        gender:
          type: string
          enum:
            - Male
            - Female
        age:
          type: integer
        localityName:
          type: string
        mobileNumber:
          type: string
        aadharNumber:
          type: string
        dateOfBirth:
          type: string
          format: date
        picture:
          type: array
          items:
            $ref: '#/components/schemas/FileInput'
        medicalHistory:
          type: string
          format: uuid
        medicalVisits:
          type: array
          items:
            type: string
            format: uuid
        medicalDocuments:
          type: array
          items:
            type: string
            format: uuid
    HealthCenter:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
        adminName:
          $ref: '#/components/schemas/UserRelated'
    HealthCenterInput:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
        adminName:
          type: string
          format: uuid
    PatientVisit:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        patient:
          $ref: '#/components/schemas/Patient'
        medicalCenter:
          $ref: '#/components/schemas/HealthCenter'
        doctor:
          $ref: '#/components/schemas/Doctor'
        visitDate:
          type: string
          format: date
        repeatVisit:
          type: boolean
        symptom1:
          $ref: '#/components/schemas/SymptomsEnum'
        symptom2:
          $ref: '#/components/schemas/SymptomsEnum'
        symptom3:
          $ref: '#/components/schemas/SymptomsEnum'
        otherSymptoms:
          type: string
        height:
          type: string
        weight:
          type: string
        temperature:
          type: string
        bloodPressure:
          type: string
        pulseRate:
          type: string
        oxygenLevel:
          type: string
        vitalStatisticsOther:
          type: string
        diagnosis:
          type: string
        caseSeverity:
          type: string
          enum:
            - Green
            - Orange
            - Red
        medicine1:
          $ref: '#/components/schemas/MedicineEnum'
        med1Qty:
          type: integer
        med1Supplied:
          type: boolean
        medicine2:
          $ref: '#/components/schemas/MedicineEnum'
        med2Qty:
          type: integer
        med2Supplied:
          type: boolean
        medicine3:
          $ref: '#/components/schemas/MedicineEnum'
        med3Qty:
          type: integer
        med3Supplied:
          type: boolean
        medicine4:
          $ref: '#/components/schemas/MedicineEnum'
        med4Qty:
          type: integer
        med4Supplied:
          type: boolean
        medicineInstructions:
          type: string
        requestedLabs:
          type: string
        dietaryInstructions:
          type: string
        isTelemedReferral:
          type: boolean
        medicineCopay:
          type: number
        doctorCopay:
          type: number
        telemedCopay:
          type: number
        referralHospital:
          type: string
        referredSpecialistDoctor:
          type: string
        returnIn:
          type: string
          enum:
            - 1week
            - 2weeks
            - 3weeks
            - 4weeks
            - 6weeks
            - 2months
            - 3months
            - 4months
            - 6months
            - 1year
        telemedicineDoctor:
          $ref: '#/components/schemas/Doctor'
        telemedicineConsultDate:
          type: string
          format: date
        differentialDiagnosis:
          type: string
        differentialRecommendation:
          type: string
        finalNotes:
          type: string
    PatientVisitInput:
      type: object
      properties:
        patient:
          type: string
          format: uuid
        medicalCenter:
          type: string
          format: uuid
        doctor:
          type: string
          format: uuid
        visitDate:
          type: string
          format: date
        repeatVisit:
          type: boolean
        symptom1:
          type: string
          format: uuid
        symptom2:
          type: string
          format: uuid
        symptom3:
          type: string
          format: uuid
        otherSymptoms:
          type: string
        height:
          type: string
        weight:
          type: string
        temperature:
          type: string
        bloodPressure:
          type: string
        pulseRate:
          type: string
        oxygenLevel:
          type: string
        vitalStatisticsOther:
          type: string
        diagnosis:
          type: string
        caseSeverity:
          type: string
          enum:
            - Green
            - Orange
            - Red
        medicine1:
          type: string
          format: uuid
        med1Qty:
          type: integer
        med1Supplied:
          type: boolean
        medicine2:
          type: string
          format: uuid
        med2Qty:
          type: integer
        med2Supplied:
          type: boolean
        medicine3:
          type: string
          format: uuid
        med3Qty:
          type: integer
        med3Supplied:
          type: boolean
        medicine4:
          type: string
          format: uuid
        med4Qty:
          type: integer
        med4Supplied:
          type: boolean
        medicineInstructions:
          type: string
        requestedLabs:
          type: string
        dietaryInstructions:
          type: string
        isTelemedReferral:
          type: boolean
        medicineCopay:
          type: number
        doctorCopay:
          type: number
        telemedCopay:
          type: number
        referralHospital:
          type: string
        referredSpecialistDoctor:
          type: string
        returnIn:
          type: string
          enum:
            - 1week
            - 2weeks
            - 3weeks
            - 4weeks
            - 6weeks
            - 2months
            - 3months
            - 4months
            - 6months
            - 1year
        telemedicineDoctor:
          type: string
          format: uuid
        telemedicineConsultDate:
          type: string
          format: date
        differentialDiagnosis:
          type: string
        differentialRecommendation:
          type: string
        finalNotes:
          type: string
    MedicineEnum:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        medicineName:
          type: string
        keptInStock:
          type: boolean
        isCommon:
          type: boolean
        medicineCategory:
          $ref: '#/components/schemas/MedicineCategoryEnum'
        genericName:
          type: string
        compositionName:
          type: string
        msrp:
          type: number
    MedicineEnumInput:
      type: object
      properties:
        medicineName:
          type: string
        keptInStock:
          type: boolean
        isCommon:
          type: boolean
        medicineCategory:
          type: string
          format: uuid
        genericName:
          type: string
        compositionName:
          type: string
        msrp:
          type: number
    DiagnosticEnum:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        diagnosticName:
          type: string
    DiagnosticEnumInput:
      type: object
      properties:
        diagnosticName:
          type: string
    Doctor:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        name:
          type: string
        specialization:
          type: string
        user:
          $ref: '#/components/schemas/UserRelated'
        phone:
          type: string
        certifications:
          type: string
        registrationId:
          type: string
        isRuralHealthcareProfessional:
          type: boolean
    DoctorInput:
      type: object
      properties:
        name:
          type: string
        specialization:
          type: string
        user:
          type: string
          format: uuid
        phone:
          type: string
        certifications:
          type: string
        registrationId:
          type: string
        isRuralHealthcareProfessional:
          type: boolean
    PatientDocument:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        patient:
          $ref: '#/components/schemas/Patient'
        image:
          type: array
          items:
            $ref: '#/components/schemas/File'
        reportName:
          type: string
        reportDate:
          type: string
          format: date
    PatientDocumentInput:
      type: object
      properties:
        patient:
          type: string
          format: uuid
        image:
          type: array
          items:
            $ref: '#/components/schemas/FileInput'
        reportName:
          type: string
        reportDate:
          type: string
          format: date
    MedicineSupplies:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        medicine:
          $ref: '#/components/schemas/MedicineEnum'
        inventoryAddDate:
          type: string
          format: date
        count:
          type: integer
        batchNumber:
          type: string
        expiryDate:
          type: string
          format: date
        rate:
          type: number
    MedicineSuppliesInput:
      type: object
      properties:
        medicine:
          type: string
          format: uuid
        inventoryAddDate:
          type: string
          format: date
        count:
          type: integer
        batchNumber:
          type: string
        expiryDate:
          type: string
          format: date
        rate:
          type: number
    MedicineInventory:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        medicine:
          $ref: '#/components/schemas/MedicineEnum'
        inventoryDate:
          type: string
          format: date
        count:
          type: integer
    MedicineInventoryInput:
      type: object
      properties:
        medicine:
          type: string
          format: uuid
        inventoryDate:
          type: string
          format: date
        count:
          type: integer
    SymptomsEnum:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        symptomName:
          type: string
    SymptomsEnumInput:
      type: object
      properties:
        symptomName:
          type: string
    MedicalHistory:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        patient:
          $ref: '#/components/schemas/Patient'
        smoking:
          type: string
          enum:
            - None
            - Cigarette
            - Bidi
            - Ganja
            - Multiple
            - Other
        drugUse:
          type: boolean
        drink:
          type: string
          enum:
            - Occasionally
            - Frequently
            - Daily
        chronicDisease1:
          $ref: '#/components/schemas/ChronicDiseaseEnum'
        chronicDisease2:
          $ref: '#/components/schemas/ChronicDiseaseEnum'
        chronicDisease3:
          $ref: '#/components/schemas/ChronicDiseaseEnum'
        familyHistory:
          type: string
    MedicalHistoryInput:
      type: object
      properties:
        patient:
          type: string
          format: uuid
        smoking:
          type: string
          enum:
            - None
            - Cigarette
            - Bidi
            - Ganja
            - Multiple
            - Other
        drugUse:
          type: boolean
        drink:
          type: string
          enum:
            - Occasionally
            - Frequently
            - Daily
        chronicDisease1:
          type: string
          format: uuid
        chronicDisease2:
          type: string
          format: uuid
        chronicDisease3:
          type: string
          format: uuid
        familyHistory:
          type: string
    ChronicDiseaseEnum:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        diseaseName:
          type: string
    ChronicDiseaseEnumInput:
      type: object
      properties:
        diseaseName:
          type: string
    MedicineCategoryEnum:
      allOf:
        - $ref: '#/components/schemas/GenericEntity'
      type: object
      properties:
        categoryName:
          type: string
    MedicineCategoryEnumInput:
      type: object
      properties:
        categoryName:
          type: string
    AuditLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        entityName:
          type: string
        entityId:
          type: string
        tenantId:
          type: string
        action:
          type: string
          enum:
            - create
            - update
            - delete
        createdById:
          type: string
        createdByEmail:
          type: string
        timestamp:
          type: string
          example: '2021-03-08T03:00:00.000Z'
        values:
          type: object
    UserCurrent:
      allOf:
        - $ref: '#/components/schemas/GenericModel'
      type: object
      properties:
        fullName:
          type: string
        firstName:
          type: string
        emailVerified:
          type: boolean
        emailVerificationTokenExpiresAt:
          type: string
          format: date-time
        provider:
          type: string
        providerId:
          type: string
        passwordResetTokenExpiresAt:
          type: string
          format: date-time
        lastName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        jwtTokenInvalidBefore:
          type: string
        importHash:
          type: string
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/TenantUser'
        avatars:
          type: array
          items:
            $ref: '#/components/schemas/File'
    UserRelated:
      allOf:
        - $ref: '#/components/schemas/GenericModel'
      type: object
      properties:
        fullName:
          type: string
        firstName:
          type: string
        emailVerified:
          type: boolean
        emailVerificationTokenExpiresAt:
          type: string
          format: date-time
        provider:
          type: string
        providerId:
          type: string
        passwordResetTokenExpiresAt:
          type: string
          format: date-time
        lastName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        jwtTokenInvalidBefore:
          type: string
          format: date-time
        importHash:
          type: string
        avatars:
          type: array
          items:
            $ref: '#/components/schemas/File'
    User:
      allOf:
        - $ref: '#/components/schemas/UserRelated'
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
            example: admin
        status:
          type: string
          enum:
            - active
            - invited
            - empty-permissions
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/TenantUser'
    TenantUser:
      allOf:
        - $ref: '#/components/schemas/GenericModel'
      type: object
      properties:
        userId:
          type: string
          format: uuid
        roles:
          type: array
          items:
            type: string
            example: admin
        invitationToken:
          type: string
        status:
          type: string
          enum:
            - active
            - invited
            - empty-permissions
        tenantId:
          type: string
          format: uuid
        tenant:
          $ref: '#/components/schemas/Tenant'
    Tenant:
      allOf:
        - $ref: '#/components/schemas/GenericModel'
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        plan:
          type: string
          enum:
            - free
            - growth
            - enterprise
        planStatus:
          type: string
          enum:
            - active
            - cancel_at_period_end
            - error
        planStripeCustomerId:
          type: string
        planUserId:
          type: string
        settings:
          type: array
          items:
            $ref: '#/components/schemas/Settings'
    TenantInput:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
    Settings:
      allOf:
        - $ref: '#/components/schemas/GenericModel'
      type: object
      properties:
        theme:
          type: string
        backgroundImageUrl:
          type: string
        logoUrl:
          type: string
        backgroundImages:
          type: array
          items:
            $ref: '#/components/schemas/File'
        logos:
          type: array
          items:
            $ref: '#/components/schemas/File'
        tenantId:
          type: string
          format: uuid
    SettingsInput:
      type: object
      properties:
        theme:
          type: string
        backgroundImages:
          type: array
          items:
            $ref: '#/components/schemas/FileInput'
        logos:
          type: array
          items:
            $ref: '#/components/schemas/FileInput'
    File:
      allOf:
        - $ref: '#/components/schemas/GenericModel'
      type: object
      properties:
        name:
          type: string
        sizeInBytes:
          type: number
        privateUrl:
          type: string
        publicUrl:
          type: string
        downloadUrl:
          type: string
    FileInput:
      type: object
      properties:
        name:
          type: string
        sizeInBytes:
          type: number
        privateUrl:
          type: string
        publicUrl:
          type: string
        new:
          type: boolean
    GenericEntity:
      allOf:
        - $ref: '#/components/schemas/GenericModel'
      type: object
      properties:
        importHash:
          type: string
        tenantId:
          type: string
          format: uuid
    GenericModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        createdById:
          type: string
          format: uuid
        updatedById:
          type: string
          format: uuid
